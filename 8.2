# Serve React App with Nginx — Files

This document contains all the files you need to build and serve a production React app using **Nginx** and Docker (multi-stage build). Copy these files into the root of your React project.

---

## 1) `Dockerfile`

```Dockerfile
# 1) Build stage
FROM node:18-alpine AS build
WORKDIR /app

# Install dependencies (use package-lock / yarn.lock if present)
COPY package*.json ./
RUN npm ci --silent

# Copy source and build
COPY . .
RUN npm run build

# 2) Production stage with nginx
FROM nginx:stable-alpine

# Remove default nginx static files
RUN rm -rf /usr/share/nginx/html/*

# Copy built files from the build stage
COPY --from=build /app/build /usr/share/nginx/html

# Copy our custom nginx config
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
```

---

## 2) `.dockerignore`

```
node_modules
build
.dockerignore
Dockerfile
.git
.gitignore
npm-debug.log
.env
.vscode
.idea
```

---

## 3) `nginx.conf`

```nginx
server {
  listen 80;
  server_name _;

  root /usr/share/nginx/html;
  index index.html;

  # Serve static assets with long cache, but never cache index.html
  location = /index.html {
    add_header Cache-Control "no-cache, no-store, must-revalidate";
    try_files $uri =404;
  }

  # Assets (JS/CSS/images) - cache long time
  location ~* \.(?:js|css|png|jpg|jpeg|gif|ico|svg|woff2?|ttf|eot)$ {
    try_files $uri =404;
    add_header Cache-Control "public, max-age=31536000, immutable";
  }

  # All other requests — pass to index.html (for React Router SPA)
  location / {
    try_files $uri $uri/ /index.html;
  }

  # Optional: hide nginx version
  server_tokens off;

  # Basic security headers (adjust if needed)
  add_header X-Content-Type-Options nosniff;
  add_header X-Frame-Options SAMEORIGIN;
  add_header X-XSS-Protection "1; mode=block";
}
```

---

## 4) `docker-compose.yml` (optional convenience)

```yaml
version: '3.8'
services:
  web:
    build: .
    image: react-nginx:latest
    ports:
      - "80:80"
    restart: unless-stopped
```

---

## 5) `README.md` (quick commands)

````markdown
# Serve React App with Nginx (Docker)

## Build & run using Docker

Build the image:

```bash
docker build -t my-react-nginx .
````

Run the container:

```bash
docker run --rm -p 80:80 my-react-nginx
```

Open [http://localhost](http://localhost) in your browser.

## Using docker-compose

```bash
docker-compose up --build -d
```

## Notes

* Ensure your React app's `package.json` has a `build` script (create-react-app uses `react-scripts build`).
* If you use environment variables in runtime, consider a runtime substitution approach (not covered here). For example: generate `index.html` or a tiny `/env.js` at container start with environment values.

```

---

## 6) Extras / Tips

- If you need HTTPS in production, terminate TLS at a reverse proxy (Traefik, AWS ALB) or use Certbot to get certificates for Nginx and add port 443 config.
- For runtime environment variables, a common pattern is to inject them into a small `env.js` served by Nginx and read them from your React app.
- If you want healthchecks, add an endpoint in your app and configure Docker `HEALTHCHECK` or your orchestration tool.

---

That's everything — the files above will let you build your React app into a static bundle and serve it with Nginx in a small Docker image. If you want, I can:

- Add a `env.js` runtime-injection example so you can change API URLs at container start.
- Add an HTTPS/nginx TLS configuration (with Certbot examples).
- Convert this into a multi-service `docker-compose` with an API backend.

Tell me which one you'd like and I'll add it to the canvas.

```
