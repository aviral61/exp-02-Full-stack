// server.js
require("dotenv").config();
const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

const app = express();
app.use(express.json());

// In-memory users (mock DB)
const users = [
  { id: 1, username: "aviral", password: bcrypt.hashSync("password123", 10), balance: 15000 },
  { id: 2, username: "neha", password: bcrypt.hashSync("neha321", 10), balance: 8000 },
];

// Middleware for JWT verification
function verifyToken(req, res, next) {
  const header = req.headers["authorization"];
  const token = header && header.split(" ")[1];
  if (!token) return res.status(401).json({ error: "Access denied. No token provided." });

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ error: "Invalid or expired token." });
    req.user = user;
    next();
  });
}

// Logging middleware
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
  next();
});

// Login route
app.post("/login", (req, res) => {
  const { username, password } = req.body;
  const user = users.find((u) => u.username === username);
  if (!user || !bcrypt.compareSync(password, user.password))
    return res.status(401).json({ error: "Invalid username or password." });

  const token = jwt.sign({ username: user.username }, process.env.JWT_SECRET, { expiresIn: "1h" });
  res.json({ message: "Login successful", token });
});

// Get balance
app.get("/api/banking/balance", verifyToken, (req, res) => {
  const user = users.find((u) => u.username === req.user.username);
  if (!user) return res.status(404).json({ error: "User not found." });
  res.json({ username: user.username, balance: user.balance });
});

// Transfer funds
app.post("/api/banking/transfer", verifyToken, (req, res) => {
  const { to, amount } = req.body;
  const sender = users.find((u) => u.username === req.user.username);
  const receiver = users.find((u) => u.username === to);

  if (!receiver) return res.status(404).json({ error: "Recipient not found." });
  if (amount <= 0) return res.status(400).json({ error: "Invalid amount." });
  if (sender.balance < amount) return res.status(400).json({ error: "Insufficient balance." });

  sender.balance -= amount;
  receiver.balance += amount;
  console.log(`[TRANSFER] ₹${amount} from ${sender.username} ➜ ${receiver.username}`);

  res.json({
    message: `Transfer of ₹${amount} successful.`,
    sender_balance: sender.balance,
    receiver: receiver.username,
  });
});

// Start server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`✅ Server running at http://localhost:${PORT}`));
